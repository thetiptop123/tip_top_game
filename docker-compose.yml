version: '3.8'
services:
  # Jenkins
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    user: root  # Run as root to have Docker permissions
    ports:
      - "8080:8080"
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket
      - /usr/bin/docker:/usr/bin/docker  # Mount Docker binary
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jenkins.rule=Host(`jenkins.localhost`)"
      - "traefik.http.services.jenkins.loadbalancer.server.port=8080"
    networks:
      - web
    environment:
      - JAVA_OPTS=-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true
      - DOCKER_HOST=unix:///var/run/docker.sock
      - DOCKER_CERT_PATH=
      - DOCKER_TLS_VERIFY=
    
  # Traefik - Reverse Proxy
  traefik:
    image: traefik:v2.5
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entryPoints.web.address=:80"
    ports:
      - "8087:80"
      - "8081:8082"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - web

  # Frontend - React/Vue/Angular App
  frontend:
    build:
      context: ./frontend
    container_name: tip_top_frontend
    environment:
      - PORT=4200
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`frontend.localhost`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=4200"
    networks:
      - web
    depends_on:
      - backend

  # Backend - Node.js/Express API
  backend:
    build:
      context: ./backend
    container_name: tip_top_backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`backend.localhost`)"
      - "traefik.http.services.backend.loadbalancer.server.port=5000"
    networks:
      - web

  # Database - MySQL
  db:
    image: mysql:8.0
    container_name: tip_top_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: tip_top_game
    volumes:
      - db_data:/var/lib/mysql

  # Prometheus - Monitoring
  prometheus:
    image: prom/prometheus:latest
    platform: linux/${TARGETARCH:-amd64}
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - web

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    platform: linux/${TARGETARCH:-amd64}
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - web
    volumes:
      - grafana_data:/var/lib/grafana

  # SonarQube Database - PostgreSQL
  sonarqube_db:
    image: postgres:latest
    container_name: sonarqube_db
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonarqube
    volumes:
      - sonarqube_db_data:/var/lib/postgresql/data
    networks:
      - web

  # SonarQube - Code Quality Analysis
  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    environment:
      SONARQUBE_JDBC_URL: jdbc:postgresql://sonarqube_db:5432/sonarqube
      SONARQUBE_JDBC_USERNAME: sonar
      SONARQUBE_JDBC_PASSWORD: sonar
    depends_on:
      - sonarqube_db
    ports:
      - "9000:9000"
    networks:
      - web
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs

networks:
  web:
    driver: bridge

volumes:
  db_data:
  sonarqube_db_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  grafana_data:
  prometheus_data:
  jenkins_data: